export declare const IDMODEL_TEMPLATE = "static async fromId<T extends _#!{NAME}>(id: number): Promise<T | null> {\n  const dbModel = await _#!{NAME}.model.findUnique({\n    where:{\n      #!{FIELD_NAME}: +id\n    }\n  });\n  if(dbModel === null) return null\n  return <T>(new _#!{NAME}(dbModel));\n}\n\nasync save(withId: boolean = false): Promise<{\n  status: true,\n  type: \"updated\" | \"created\"\n  id: number\n} | {\n  status: false\n}> {\n  if(this.#!{FIELD_NAME} < 0 || withId){\n    #!{CHECK_REQUIRED}\n    \n    const data = {\n      #!{REQUIRED_FIELDS_CREATE}\n    }\n\n    try {\n      const user = await this.model.create({\n        data: data\n      })\n      this.#!{FIELD_NAME} = user.#!{FIELD_NAME}\n      return {status: true, id: user.#!{FIELD_NAME}, type: \"created\"}\n    } catch (_) {\n      return {status: false}\n    }\n  }\n\n  try{\n    const data = {\n      #!{REQUIRED_FIELDS_UPDATE}\n    }\n\n    const user = await this.model.update({\n      where:{\n        #!{FIELD_NAME}: this.#!{FIELD_NAME}\n      },\n      data: data\n    })\n\n    return {status: true, id: user.#!{FIELD_NAME}, type: \"updated\"}\n  } catch (_){\n    return {status: false}\n  }\n\n\n}\n";
