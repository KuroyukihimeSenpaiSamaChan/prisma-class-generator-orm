generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider = "dist/bin.js"
  output   = "./gen/"
  dryRun   = "false"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AccessToken {
  id         Int    @id @default(autoincrement())
  user_id    Int
  token      String @db.VarChar(64)
  created_at Int?
  expires_at Int?
  user       User   @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_token_user")

  @@index([user_id], map: "fk_token_user")
}

model User {
  id              Int            @id @default(autoincrement())
  user_pass       String         @db.VarChar(64)
  user_email      String         @unique @db.VarChar(64)
  user_registered Boolean        @default(false)
  firstname       String         @db.VarChar(64)
  lastname        String         @db.VarChar(64)
  birthdate       Int
  token           String         @db.VarChar(32)
  deleting        Int?
  access_token    AccessToken[]
  media           Media[]
  product         Product[]
  sub_order       SubOrder[]
  user_billing    UserBilling[]
  user_delete     UserDelete[]
  user_delivery   UserDelivery[]
  // Many-to-many
  roles           Role[]         @relation("MtM_UserRole")
}

model Role {
  id    Int    @id @default(autoincrement())
  label String @db.VarChar(32)
  // Many-to-many
  users User[] @relation("MtM_UserRole")
}

model UserDelete {
  id        Int     @id @default(autoincrement())
  user_id   Int
  token     String  @db.VarChar(32)
  date      Int
  validated Boolean @default(false)
  user      User    @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_delete_user")
}

model UserBilling {
  id                 Int     @id @default(autoincrement())
  user_id            Int
  address            String  @db.VarChar(256)
  additional_address String? @db.VarChar(256)
  zipcode            String  @db.VarChar(256)
  city               String  @db.VarChar(256)
  country            String  @db.VarChar(256)
  region             String  @db.VarChar(256)
  phone_number       String  @db.VarChar(32)
  company_name       String? @db.VarChar(128)
  user               User    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user_id")

  @@index([user_id], map: "fk_user_id_billing")
}

model UserDelivery {
  id                 Int     @id @default(autoincrement())
  user_id            Int
  address            String  @db.VarChar(256)
  additional_address String? @db.VarChar(256)
  zipcode            String  @db.VarChar(256)
  city               String  @db.VarChar(256)
  country            String  @db.VarChar(256)
  region             String  @db.VarChar(256)
  phone_number       String  @db.VarChar(32)
  company_name       String? @db.VarChar(128)
  user               User    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user_id_delivery")

  @@index([user_id], map: "fk_user_id_delivery")
}

model Expedition {
  id         Int        @id @default(autoincrement())
  name       Int
  slug       Int
  max_weight Int
  price      Int
  sub_orders SubOrder[]
}

model Media {
  id                Int       @id @default(autoincrement())
  slug              String    @db.VarChar(256)
  url               String    @db.VarChar(256)
  creation_date     Int
  modification_date Int
  user_id           Int
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_user_id_")
  product_image     Product[]
  product_gallery   Product[] @relation("MtM_ProductGallery")

  @@index([user_id], map: "fk_user_id_")
}

model Order {
  id                Int        @id @default(autoincrement())
  order_client_id   Int
  creation_date     Int
  modification_date Int
  order_state       Int
  type              Int
  buyer_id          Int
  buyer_billing_id  Int
  buyer_delivery_id Int
  expedition_id     Int
  order_total       Float
  sub_orders        SubOrder[]
}

model Product {
  id                     Int               @id @default(autoincrement())
  vendor_id              Int
  state                  Int               @default(1)
  tva                    Int
  product_name           String            @db.VarChar(256)
  vendor_sku             String            @db.VarChar(256)
  product_sku            String            @db.VarChar(256)
  price                  Float
  price_promo            Float
  description            String            @db.VarChar(1024)
  additional_description String?           @db.VarChar(1024)
  backorder              Boolean
  unique_product         Boolean
  linked_products        String            @db.LongText
  product_image          Int
  product_keywords       String            @db.VarChar(1024)
  creation_date          Int
  modification_date      Int
  has_tva                Boolean
  visibility             Int               @default(1)
  media                  Media             @relation(fields: [product_image], references: [id], onDelete: Cascade, map: "fk_image_id")
  tva_type               TVAType           @relation(fields: [tva], references: [id], onDelete: Cascade, map: "fk_tva_id")
  user                   User              @relation(fields: [vendor_id], references: [id], onDelete: Cascade, map: "fk_vendor_id")
  productState           ProductState      @relation(fields: [state], references: [id], onDelete: Cascade, map: "fk_state")
  productVisibilty       ProductVisibilty  @relation(fields: [visibility], references: [id], onDelete: Cascade, map: "fk_visibility")
  sub_orders             SubOrder[]
  // Many-to-Many
  product_categories     ProductCategory[] @relation("MtM_ProductCategory")
  gallery                Media[]           @relation("MtM_ProductGallery")

  @@index([product_image], map: "fk_image_id")
  @@index([state], map: "fk_state")
  @@index([tva], map: "fk_tva_id")
  @@index([vendor_id], map: "fk_vendor_id")
  @@index([visibility], map: "fk_visibility")
}

model ProductCategory {
  id            Int       @id @default(autoincrement())
  category_name String    @db.VarChar(64)
  category_slug String    @db.VarChar(64)
  // Many-to-Many
  products      Product[] @relation("MtM_ProductCategory")
}

model ProductVisibilty {
  id         Int       @id @default(autoincrement())
  visibility String    @default("a") @db.VarChar(128)
  products   Product[]
}

model ProductState {
  id       Int       @id @default(autoincrement())
  state    String    @db.VarChar(256)
  products Product[]
}

model SubOrder {
  id            Int        @id @default(autoincrement())
  order_id      Int
  vendor_id     Int
  expedition_id Int
  product_id    Int
  product_price Float
  quantity      Int
  taxe_id       Int        @default(1)
  expedition    Expedition @relation(fields: [expedition_id], references: [id], onDelete: Cascade, map: "fk_expedition_id")
  order         Order      @relation(fields: [order_id], references: [id], onDelete: Cascade, map: "fk_order_id")
  product       Product    @relation(fields: [product_id], references: [id], onDelete: Cascade, map: "fk_product_id_")
  user          User       @relation(fields: [vendor_id], references: [id], onDelete: Cascade, map: "fk_vendor_id_")
  tva_type      TVAType    @relation(fields: [taxe_id], references: [id], onDelete: Cascade, map: "taxe_id")

  @@index([expedition_id], map: "fk_expedition_id")
  @@index([order_id], map: "fk_order_id")
  @@index([product_id], map: "fk_product_id_")
  @@index([vendor_id], map: "fk_vendor_id_")
  @@index([taxe_id], map: "taxe_id")
}

model TVAType {
  id         Int        @id @default(autoincrement())
  slug       String     @db.VarChar(256)
  amount     Int        @default(0)
  products   Product[]
  sub_orders SubOrder[]
}
